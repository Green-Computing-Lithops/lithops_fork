#!/usr/bin/env python3
"""
Funci√≥n alemana adaptada para ejecutar en container runtime personalizado
con simulaci√≥n de costes integrada
"""
import lithops
from lithops.storage import Storage
import time
from datetime import datetime
import os
import sys

# A√±adir el directorio actual al path para importar simulacion_costes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from simulacion_costes import calcular_coste_aws_lambda, mostrar_simulacion_costes
except ImportError:
    # Fallback si no est√° disponible el m√≥dulo
    print("‚ö†Ô∏è M√≥dulo de simulaci√≥n no disponible, ejecutando sin simulaci√≥n")
    def calcular_coste_aws_lambda(*args, **kwargs):
        return {'total': {'coste_total_usd': 0.0}}
    def mostrar_simulacion_costes(resultado):
        print("Simulaci√≥n de costes no disponible")


def funcion_german_con_simulacion(x):
    """
    Tu funci√≥n original con capacidad de simulaci√≥n incluida
    Optimizada para container runtime
    """
    storage = Storage()
    try:
        # Use the same bucket as configured in lithops
        bucket_name = "lithops-us-east-1-45dk"
        
        # Create a test object
        test_key = f"test-execution/test-file-{x}.txt"
        test_data = f"Hello from AWS Lambda container task {x}"
        storage.put_object(bucket_name, test_key, test_data)
        print(f"‚úÖ Created test file in S3: {bucket_name}/{test_key}")
        
        # List objects in the test directory
        keys = storage.list_keys(bucket_name, prefix="test-execution/")
        print(f"üìã Found {len(keys)} keys in {bucket_name}")
        
        # Read back the test object
        result = storage.get_object(bucket_name, test_key)
        print(f"üìñ Read back from S3: {result}")
        
    except Exception as e:
        print(f"‚ùå AWS S3 operation failed: {e}")
        import traceback
        traceback.print_exc()
    
    return x + 1


def ejecutar_con_simulacion_local():
    """
    Funci√≥n para ejecutar localmente (antes del despliegue)
    """
    print("üè† EJECUCI√ìN LOCAL - SIMULACI√ìN DE COSTES")
    print("=" * 50)
    
    # Datos de entrada
    datos = [1, 2, 3]
    
    # üßÆ SIMULACI√ìN DE COSTES
    print("üßÆ Realizando simulaci√≥n de costes...")
    simulacion = calcular_coste_aws_lambda(
        num_invocaciones=len(datos),
        memoria_mb=256,
        duracion_estimada_ms=2000,
        region='us-east-1'
    )
    
    mostrar_simulacion_costes(simulacion)
    
    # Confirmaci√≥n del usuario
    respuesta = input("¬øContinuar con el despliegue en AWS Lambda? (s/n): ").lower().strip()
    
    if respuesta not in ['s', 'si', 's√≠', 'y', 'yes']:
        print("‚ùå Despliegue cancelado por el usuario.")
        return None
    
    return simulacion


def ejecutar_en_aws_lambda():
    """
    Funci√≥n principal que se ejecuta en AWS Lambda
    """
    print("‚òÅÔ∏è EJECUCI√ìN EN AWS LAMBDA")
    print("=" * 30)
    
    # Datos de entrada
    datos = [1, 2, 3]
    
    try:
        # Crear executor (usar√° el runtime configurado en lithops_config.yaml)
        # No especificamos runtime aqu√≠ - se toma de la configuraci√≥n
        executor = lithops.FunctionExecutor()
        
        # ‚è∞ Medir tiempo de ejecuci√≥n
        inicio = time.time()
        inicio_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"‚è∞ Inicio: {inicio_timestamp}")
        
        # Ejecutar funciones
        print(f"üöÄ Ejecutando {len(datos)} invocaciones...")
        futures = executor.map(funcion_german_con_simulacion, datos)
        resultados = executor.get_result(futures)
        
        fin = time.time()
        fin_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        duracion_real = (fin - inicio) * 1000  # en ms
        duracion_promedio = duracion_real / len(datos)
        
        print(f"\n‚úÖ EJECUCI√ìN COMPLETADA")
        print(f"‚è∞ Fin: {fin_timestamp}")
        print(f"üìä Resultados: {resultados}")
        print(f"‚è±Ô∏è  Duraci√≥n total: {duracion_real:.2f} ms")
        print(f"‚è±Ô∏è  Duraci√≥n promedio por funci√≥n: {duracion_promedio:.2f} ms")
        
        # üîÑ Recalcular con duraci√≥n real
        print("\nüîÑ Recalculando costes con duraci√≥n real...")
        simulacion_real = calcular_coste_aws_lambda(
            num_invocaciones=len(datos),
            memoria_mb=256,
            duracion_estimada_ms=int(duracion_promedio),
            region='us-east-1'
        )
        
        print(f"\nüìä COMPARACI√ìN FINAL:")
        print(f"   ‚Ä¢ Duraci√≥n estimada: 2000 ms/funci√≥n")
        print(f"   ‚Ä¢ Duraci√≥n real: {duracion_promedio:.0f} ms/funci√≥n")
        print(f"   ‚Ä¢ Coste real estimado: ${simulacion_real['total']['coste_total_usd']}")
        
        if duracion_promedio < 2000:
            ahorro = ((2000 - duracion_promedio) / 2000) * 100
            print(f"   ‚Ä¢ üéâ Funci√≥n {ahorro:.1f}% m√°s r√°pida de lo estimado!")
        else:
            exceso = ((duracion_promedio - 2000) / 2000) * 100
            print(f"   ‚Ä¢ ‚ö†Ô∏è Funci√≥n {exceso:.1f}% m√°s lenta de lo estimado")
        
        return resultados
        
    except Exception as e:
        print(f"‚ùå Error ejecutando en AWS Lambda: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """
    Funci√≥n principal que maneja tanto simulaci√≥n local como ejecuci√≥n en AWS
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='Ejecutar funci√≥n con simulaci√≥n de costes')
    parser.add_argument('--mode', choices=['local', 'aws'], default='local',
                        help='Modo de ejecuci√≥n: local (simulaci√≥n) o aws (real)')
    parser.add_argument('--config', '-c', default='lithops_config.yaml',
                        help='Archivo de configuraci√≥n de Lithops')
    
    args = parser.parse_args()
    
    if args.mode == 'local':
        # Ejecutar simulaci√≥n local
        simulacion = ejecutar_con_simulacion_local()
        if simulacion:
            print("\nüí° Para ejecutar en AWS Lambda, usa:")
            print(f"   python {__file__} --mode aws")
            
    elif args.mode == 'aws':
        # Ejecutar en AWS Lambda
        if os.path.exists(args.config):
            os.environ['LITHOPS_CONFIG_FILE'] = args.config
        
        resultados = ejecutar_en_aws_lambda()
        if resultados:
            print(f"\nüèÜ Proceso completado exitosamente: {resultados}")


if __name__ == "__main__":
    # Si se ejecuta sin argumentos, hacer simulaci√≥n local por defecto
    if len(sys.argv) == 1:
        print("üßÆ Ejecutando simulaci√≥n local por defecto...")
        print("üí° Para ver opciones: python main_german_container.py --help\n")
        
        simulacion = ejecutar_con_simulacion_local()
        if simulacion:
            print("\nüí° Para ejecutar en AWS Lambda, usa:")
            print(f"   python {__file__} --mode aws")
    else:
        main()
